// Code generated by queryx, DO NOT EDIT.

import { Pool } from "pg";
import { Env, Config, newConfig, getenv } from "./config";
{{- range $m := $.client.Models }}
import { {{ $m.Name }}Query } from "../{{ $m.Name | snake }}"
{{- end }}
import { Table, BigIntColumn, IntegerColumn, FloatColumn, BooleanColumn, StringColumn, TextColumn, DateColumn, TimeColumn, DatetimeColumn, UUIDColumn, JSONColumn } from "./table";

export class QXClient {
  private db: Pool;
	{{- range $m := $.client.Models }}
	public {{ $m.Name }}: Table;
	{{- range .Columns }}
	public {{ $m.Name }}{{ firstWordUpperCamel .Name }}: {{goType .Type}}Column
	{{- end}}
	{{- end}}

  constructor(config: Config) {
    this.db = new Pool({
      connectionString: config.url,
    });
    {{- range $m := $.client.Models }}
    this.{{ $m.Name }} = new Table("{{ $m.TableName }}");
    {{- range .Columns }}
    this.{{ $m.Name }}{{ firstWordUpperCamel .Name }} = this.{{ $m.Name }}.new{{goType .Type}}Column();
    {{- end}}
    {{- end}}
  }

  connect() {
    return this.db.connect();
  }

  async query(query: string, ...args: any[]) {
    const res = await this.db.query(rebind("dollar", query), args);
    return res.rows;
  }

  async queryOne(query: string, ...args: any[]) {
    const res = await this.db.query(rebind("dollar", query), args);
    return res.rows[0];
  }

  async exec(query: string, ...args: any[]) {
    const res = await this.db.query(rebind("dollar", query), args);
    return res;
  }

  {{- range $m := $.client.Models }}
  query{{ $m.Name }}() {
    return new {{ $m.Name }}Query(this);
  }

  change{{ $m.Name }}() {
    return new {{$m.Name}}Change();
  }
  {{- end }}

  async tx() {
    const tx = new Tx();
    await tx.exec("BEGIN");
    return tx;
  }
}

export class Tx extends QXClient {
  constructor() {
    super();
  }

  commit() {
    return this.exec("COMMIT");
  }
  rollback() {
    return this.exec("ROLLBACK");
  }
}

export const newClient = () => {
  let env = getenv("QUERYX_ENV");
  return newClientWithEnv(env);
};

export const newClientWithEnv = async (env: Env) => {
  let config = newConfig(env);
  let client = new QXClient(config);
  await client.connect();
  return client;
};

type BindType = "question" | "unknown" | "dollar" | "named" | "at";

export function rebind(bindType: BindType, query: string): string {
  switch (bindType) {
    case "question":
    case "unknown":
      return query;
  }

  let rqb = "";
  let i,
    j = 0;

  for (i = query.indexOf("?"); i !== -1; i = query.indexOf("?")) {
    rqb += query.substring(0, i);

    switch (bindType) {
      case "dollar":
        rqb += "$";
        break;
      case "named":
        rqb += ":arg";
        break;
      case "at":
        rqb += "@p";
        break;
    }

    j++;
    rqb += j.toString();

    query = query.substring(i + 1);
  }

  return rqb + query;
}
