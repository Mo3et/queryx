// Code generated by queryx, DO NOT EDIT.

import { Pool, QueryResultRow, types } from "pg";
import { Env, Config, newConfig, getenv } from "./config";
{{- range $m := $.client.Models }}
import { {{ $m.Name }}Query } from "../{{ $m.Name | snake }}"
{{- end }}
import { Table, BigIntColumn, IntegerColumn, FloatColumn, BooleanColumn, StringColumn, TextColumn, DateColumn, TimeColumn, DatetimeColumn, UUIDColumn, JSONColumn } from "./table";
import { rebind } from "./adapter";
import { Clause } from "./clause";

types.setTypeParser(types.builtins.INT8, val => parseInt(val, 10));

export class QXClient {
  private db: Pool;
  public config: Config;
	{{- range $m := $.client.Models }}
	public {{ $m.Name | camel }}: Table;
	{{- range $c := .Columns }}
	public {{ $m.Name | camel }}{{ $c.Name | pascal }}: {{goType .Type}}Column
	{{- end}}
	{{- end}}

  constructor(config: Config) {
    this.config = config;
    this.db = new Pool({
      connectionString: config.url,
    });
    {{- range $m := $.client.Models }}
    this.{{ $m.Name | camel }} = new Table("{{ $m.TableName }}");
    {{- range $c := .Columns }}
    this.{{ $m.Name | camel }}{{ $c.Name | pascal }} = this.{{ $m.Name | camel }}.new{{ goType .Type }}Column("{{ $c.Name }}");
    {{- end}}
    {{- end}}
  }

  private _query<R extends QueryResultRow = any, I extends any[] = any[]>(
    query: string,
    args?: I
  ) {
    let [query1, args1] = rebind<I>(query, args);
    console.log(query1, args1);
    return this.db.query<R, I>(query1, args1);
  }

  async query<R extends QueryResultRow = any>(query: string, ...args: any[]) {
    const res = await this._query<R>(query, args);
    return res.rows;
  }

  async queryOne<R extends QueryResultRow = any>(
    query: string,
    ...args: any[]
  ) {
    const res = await this._query<R>(query, args);
    return res.rows[0];
  }

  async exec(query: string, ...args: any[]) {
    const res = await this._query(query, args);
    return res.rowCount;
  }

  {{- range $m := $.client.Models }}

  query{{ $m.Name }}() {
    return new {{ $m.Name }}Query(this);
  }
  {{- end }}

  async tx() {
    const tx = new Tx(this.config);
    await tx.exec("BEGIN");
    return tx;
  }

  and(...clauses: Clause[]) {
    return clauses[0].and(...clauses.slice(1));
  }

  or(...clauses: Clause[]) {
    return clauses[0].or(...clauses.slice(1))
  }
}

export class Tx extends QXClient {
  constructor(config) {
    super(config);
  }

  commit() {
    return this.exec("COMMIT");
  }
  rollback() {
    return this.exec("ROLLBACK");
  }
}

export const newClient = () => {
  let env = getenv("QUERYX_ENV") || "development";
  return newClientWithEnv(env);
};

export const newClientWithEnv = (env: Env) => {
  let config = newConfig(env);
  let client = new QXClient(config);
  return client;
};
