// Code generated by queryx, DO NOT EDIT.

import { QXClient, SelectStatement, newInsert } from "../queryx";
import { {{ $.model.Name }} } from "./{{ $.model.Name | snake }}";
import { {{ $.model.Name }}Change, {{ $.model.Name }}ChangeInput } from "./{{ $.model.Name | snake }}_change";

export class {{ $.model.Name }}Query {
  private client: QXClient;
  private selectStatement: SelectStatement;

  constructor(client: QXClient) {
    this.client = client;
    this.selectStatement = new SelectStatement();
    this.selectStatement.select("users.*").from("users");
  }

  async create(input: {{ $.model.Name }}ChangeInput ) {
    let change = new {{ $.model.Name }}Change(input);
    {{- if $.model.Timestamps }}
    const now = new Date().toISOString();
    if(change.createdAt === undefined) {
      change.setCreatedAt(now);
    }
    if (change.updatedAt === undefined) {
      change.setUpdatedAt(now);
    }
    {{- end }}

    let [columns, values] = change.changes();
    let [query, args] = newInsert()
      .into("{{ $.model.TableName }}")
      .columns(...columns)
      .values(...values)
      .returning("{{ range $i, $e := $.model.Columns}}{{if $i}},{{end}}{{.Name}}{{end}}")
      .toSQL();

    let row = await this.client.queryOne(query, ...args);
    let record = new {{ $.model.Name }}(this.client);

    {{- range $c := $.model.Columns }}
    record.{{ $c.Name | camel }} = row.{{ $c.Name }};
    {{- end }}

    return record;
  }

  async find() {}

  async findBy() {}

  async findBySQL() {}

  where() {}

  select() {}

  limit() {}

  offset() {}

  group() {}

  having() {}

  joins() {}

  order() {}

  {{- range $b := $.model.BelongsTo }}
  preload{{ pascal $b.Name }}() {}
  {{- end }}

  {{- range $h := $.model.HasMany }}
  preload{{ pascal $h.Name }}() {}
  {{- end }}

  {{- range $h := $.model.HasOne }}
  preload{{ pascal $h.Name }}() {}
  {{- end }}

  all() {}

  first() {}

  count() {}

  exists() {}

  updateAll() {}

  deleteAll() {}
}
