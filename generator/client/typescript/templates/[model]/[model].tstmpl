// Code generated by queryx, DO NOT EDIT.

import { QXClient } from "../queryx";
import { {{ $.model.Name }}ChangeInput } from "./{{ $.model.Name | snake}}_change";
{{- range $b := $.model.BelongsTo }}
import { {{ $b.ModelName }} } from "../{{ $b.ModelName | snake }}"
{{- end }}
{{- range $h := $.model.HasMany }}
import { {{ $h.ModelName }} } from "../{{ $h.ModelName | snake }}"
{{- end }}
{{- range $h := $.model.HasOne }}
import { {{ $h.ModelName }} } from "../{{ $h.ModelName | snake }}"
{{- end }}

export class {{ $.model.Name }} {
	{{- range $c := .model.Columns }}
  public {{ $c.Name | camel }}: {{ tsType $c.Type }}{{ if $c.Null }} | null{{ end }};
  {{- end }}
	{{- range $b := $.model.BelongsTo }}
  public {{ $b.Name | camel }}: {{ $b.ModelName }};
  {{- end }}
	{{- range $h := $.model.HasMany }}
	public {{ $h.Name | camel }}: {{ $h.ModelName }}[];
	{{- end }}
	{{- range $h := $.model.HasOne }}
	public {{ $h.Name | camel }}: {{ $h.ModelName }};
	{{- end }}
  private _client: QXClient;

  constructor(client: QXClient) {
    this._client = client;
  }

  applyChange(input: {{ $.model.Name }}ChangeInput) {
    {{- range $c := $.model.Columns }}
    if (input.{{ $c.Name | camel }} !== undefined) {
      this.{{ $c.Name | camel }} = input.{{ $c.Name | camel }};
    }
    {{- end }}
  }

  async update(input: {{ $.model.Name }}ChangeInput) {
    let filter = this._client.{{ $.model.Name | camel }}ID.eq(this.id);
    await this._client.query{{ $.model.Name }}().where(filter).updateAll(input);
    this.applyChange(input);
  }

  async delete() {}

  toString() {}
  toJSON() {}
}
