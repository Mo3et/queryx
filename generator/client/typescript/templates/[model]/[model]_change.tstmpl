// Code generated by queryx, DO NOT EDIT.

export interface {{ $.model.Name }}ChangeInput {
  {{- range $c := .model.Columns }}
  {{ $c.Name | camel }}?: {{ tsType $c.Type }}{{ if $c.Null}} | null{{ end }};
  {{- end }}
}

export class {{ $.model.Name }}Change {
  {{- range $c := .model.Columns }}
  public {{ $c.Name | camel }}?: {{ tsType $c.Type }}{{ if $c.Null}} | null{{ end }};
  {{- end }}

  constructor(input: {{ $.model.Name }}ChangeInput) {
    {{- range $c := .model.Columns }}
    if (input.{{ $c.Name | camel }} !== undefined) {
      this.{{ $c.Name | camel }} = input.{{ $c.Name | camel }};
    }
    {{- end }}
  }

  {{- range $c := .model.Columns }}

  set{{ $c.Name | pascal }}({{ $c.Name | camel}}: {{ tsChangeSetType $c.Type }}) {
    this.{{ $c.Name | camel }} = {{ $c.Name | camel}};
    return this;
  }
  {{- end }}

  changes() {
    let columns: string[] = [];
    let values: any[] = [];

    {{- range $c := .model.Columns }}
    if (this.{{ $c.Name | camel }} !== undefined) {
      columns.push("{{ $c.Name }}");
      values.push(this.{{ $c.Name | camel }});
    }
    {{- end }}

    return [columns, values];
  }
}
