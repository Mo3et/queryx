// Code generated by queryx, DO NOT EDIT.

package {{ .packageName }}

import (
	"database/sql"
	"time"
	"fmt"
)

type {{ $.model.Name }} struct {
	{{- range $c := .model.Columns }}
	{{ pascal $c.Name }} {{ goModelType $c.Type $c.Null }} `json:"{{ camel $c.Name }}" db:"{{ $c.Name }}"`
	{{- end }}
	{{- range $b := $.model.BelongsTo}}
    {{ $b.Name | pascal }} *{{ $b.ModelName }} `json:"{{ camel $b.Name }}"`
  {{- end }}
	{{- range $h := $.model.HasMany }}
		{{ $h.Name | pascal }} []*{{ $h.ModelName }} `json:"{{ $h.Name | camel }}"`
	{{- end }}
	{{- range $h := $.model.HasOne }}
		{{ $h.Name | pascal }} *{{ $h.ModelName }} `json:"{{ $h.Name | camel }}"`
	{{- end }}

	schema *queryx.Schema
	queries Queries
}

{{- $m := firstLetterLower $.model.Name }}

func ({{ $m }} *{{.model.Name}}) String() string {
	var b strings.Builder
	b.WriteString("{{ $.model.Name }}(")
	{{- range $i, $c := $.model.Columns }}
	b.WriteString(fmt.Sprintf("{{ $c.Name }}=%v", {{ $m }}.{{ pascal $c.Name }}))
	b.WriteString(", ")
	{{- end }}
	b.WriteString(")")
	return b.String()
}

func ({{ $m }} *{{.model.Name}}) applyChange(change *queryx.{{.model.Name}}Change) error {
	{{- range $c := $.model.Columns }}
	{{- $f := $c.Name | pascal }}
	if change.{{ $f }}.Set {
		{{- $t1 := goModelType $c.Type $c.Null }}
		{{- $t2 := printf "queryx.%s" (goType $c.Type) }}
		{{- if eq $t1 $t2 }}
		{{ $m }}.{{ pascal $c.Name}} = change.{{ $f }}
		{{- else }}
		{{ $m }}.{{ pascal $c.Name}} = change.{{ $f }}.Val
		{{- end }}
	}
  {{- end }}
	return nil
}

func ({{ $m }} *{{.model.Name}}) Update(change *queryx.{{.model.Name}}Change) error {
	_, err := {{ $m }}.queries.Query{{.model.Name}}().Where({{$m}}.schema.And(
	{{- range $i, $c := $.model.PrimaryKey.Columns -}}
		{{ if $i }}, {{ end }}{{ $m }}.schema.{{ $.model.Name }}{{ $c.Name | pascal }}.EQ({{ $m }}.{{ $c.Name | pascal }})
	{{- end -}}
	)).UpdateAll(change)
	if err != nil {
		return err
	}

	return {{ $m }}.applyChange(change)
}

func ({{ $m }} *{{.model.Name}}) Delete() error {
	_, err := {{$m}}.queries.Query{{.model.Name}}().Delete(
	{{- range $i, $c := $.model.PrimaryKey.Columns -}}
		{{ if $i }}, {{ end }}{{ $m }}.{{ $c.Name | pascal }}
	{{- end -}})
	return err
}

{{- $ms := .client.Models }}
{{- $m := .model.Name }}
{{- range $v := .client.Models }}
{{- range $v2 := $v.HasMany }}
{{- if eq $v.Name $m }}
{{- $singV2Through := firstWordUpperCamel $v2.Through }}
{{- if ne  $singV2Through "" }}
func ({{ $m }} *{{ $m }}) Query{{firstWordUpperCamel $v2.Name}}() *{{singular (firstWordUpperCamel $v2.Name)}}Query {
	return {{$m}}.queries.Query{{singular (firstWordUpperCamel $v2.Name)}}().
		Joins("inner join {{getTableNameOfThrough $v2.Through  $ms}} on {{getTableNameOfThrough $v2.Through  $ms}}.{{singular (getTableNameOfHasMany $v2  $ms)}}_id = {{getTableNameOfHasMany $v2  $ms}}.id").
		Where({{$m}}.schema.{{singular $singV2Through}}{{singular (firstWordUpperCamel $m)}}ID.EQ({{$m}}.ID))
}
{{- else }}
func ({{ $m }} *{{ $m }}) Query{{firstWordUpperCamel $v2.Name}}() *{{singular (firstWordUpperCamel $v2.Name)}}Query {
	return {{ $m }}.queries.Query{{singular (firstWordUpperCamel $v2.Name)}}().
		Where({{ $m }}.schema.{{singular (firstWordUpperCamel $v2.Name)}}{{singular (firstWordUpperCamel $m)}}ID.EQ({{$m}}.ID))
}
{{- end }}
{{- end }}
{{- end }}
{{- end -}}
