// Code generated by queryx, DO NOT EDIT.

package queryx

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"time"
)

type Time struct {
	Val  time.Time
	Null bool
	Set  bool
}

func parseTime(s string) (*time.Time, error) {
	// TODO: timezone from config
	location, err := time.LoadLocation("Asia/Shanghai")
	if err != nil {
		return nil, err
	}
	t, err := time.ParseInLocation("15:04:05", s, location)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func NewTime(v string) Time {
	t, err := parseTime(v)
	if err != nil {
		return Time{Null: true}
	}

	return Time{Val: *t}
}

func NewNullableTime(v *string) Time {
	if v != nil {
		return NewTime(*v)
	}
	return Time{Null: true}
}

// Scan implements the Scanner interface.
func (t *Time) Scan(value interface{}) error {
	n := sql.NullTime{}
	err := n.Scan(value)
	if err != nil {
		return err
	}
	t.Val, t.Null = n.Time, !n.Valid
	return nil
}

// Value implements the driver Valuer interface.
func (t Time) Value() (driver.Value, error) {
	if t.Null {
		return nil, nil
	}
	return t.Val, nil
}

func (t Time) MarshalJSON() ([]byte, error) {
	if t.Null {
		return json.Marshal(nil)
	}
	return json.Marshal(t.Val)
}

func (t *Time) UnmarshalJSON(text []byte) error {
	return nil
}
