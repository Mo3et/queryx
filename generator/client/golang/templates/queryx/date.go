// Code generated by queryx, DO NOT EDIT.

package queryx

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
	"time"
)

type Date struct {
	Val  time.Time
	Null bool
	Set  bool
}

func parseDate(s string) (*time.Time, error) {
	// TODO: timezone from config
	location, err := time.LoadLocation("Asia/Shanghai")
	if err != nil {
		return nil, err
	}
	t, err := time.ParseInLocation("2006-01-02", s, location)
	if err != nil {
		return nil, err
	}
	return &t, nil
}

func NewDate(v string) Date {
	t, err := parseDate(v)
	if err != nil {
		return Date{Null: true}
	}

	return Date{Val: *t}
}

func NewNullableDate(v *string) Date {
	if v != nil {
		return NewDate(*v)
	}
	return Date{Null: true}
}

// Scan implements the Scanner interface.
func (d *Date) Scan(value interface{}) error {
	n := sql.NullTime{}
	err := n.Scan(value)
	if err != nil {
		return err
	}
	d.Val, d.Null = n.Time, !n.Valid
	return nil
}

// Value implements the driver Valuer interface.
func (d Date) Value() (driver.Value, error) {
	if d.Null {
		return nil, nil
	}
	return d.Val, nil
}

func (d Date) MarshalJSON() ([]byte, error) {
	if d.Null {
		return json.Marshal(nil)
	}
	return json.Marshal(d.Val)
}

func (d *Date) UnmarshalJSON(text []byte) error {
	return nil
}
