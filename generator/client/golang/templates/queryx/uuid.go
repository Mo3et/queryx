// Code generated by queryx, DO NOT EDIT.

package queryx

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
)

type UUID struct {
	Val  string
	Null bool
	Set  bool
}

func NewUUID(v string) UUID {
	return UUID{Val: v}
}

func NewNullableUUID(v *string) UUID {
	if v != nil {
		return UUID{Val: *v}
	}
	return UUID{Null: true}
}

// Scan implements the Scanner interface.
func (u *UUID) Scan(value interface{}) error {
	ns := sql.NullString{String: u.Val}
	err := ns.Scan(value)
	u.Val, u.Null = ns.String, !ns.Valid
	return err
}

// Value implements the driver Valuer interface.
func (u UUID) Value() (driver.Value, error) {
	if u.Null {
		return nil, nil
	}
	return u.Val, nil
}

// MarshalJSON implements the json.Marshaler interface.
func (u UUID) MarshalJSON() ([]byte, error) {
	if u.Null {
		return json.Marshal(nil)
	}
	return json.Marshal(u.Val)
}

// UnmarshalJSON implements the json.Unmarshaler interface.
func (u *UUID) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		u.Null = true
		return nil
	}
	if err := json.Unmarshal(data, &u.Val); err != nil {
		return err
	}
	return nil
}
