// Code generated by queryx, DO NOT EDIT.

package queryx

import (
	"database/sql"
	"database/sql/driver"
	"encoding/json"
)

type String struct {
	Val  string
	Null bool
	Set  bool
}

func NewString(v string) String {
	return String{Val: v}
}

func NewNullableString(v *string) String {
	if v != nil {
		return NewString(*v)
	}
	return String{Null: true}
}

// Scan implements the Scanner interface.
func (s *String) Scan(value interface{}) error {
	ns := sql.NullString{String: s.Val}
	err := ns.Scan(value)
	s.Val, s.Null = ns.String, !ns.Valid
	return err
}

// Value implements the driver Valuer interface.
func (s String) Value() (driver.Value, error) {
	if s.Null {
		return nil, nil
	}
	return s.Val, nil
}

func (s String) MarshalJSON() ([]byte, error) {
	if s.Null {
		return json.Marshal(nil)
	}
	return json.Marshal(s.Val)
}

func (s *String) UnmarshalJSON(text []byte) error {
	if string(text) == "null" {
		s.Null = true
		return nil
	}
	var str string
	if err := json.Unmarshal(text, &str); err == nil {
		s.Val = str
	}
	return nil
}
