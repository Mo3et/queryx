// Code generated by queryx, DO NOT EDIT.

package queryx

import (
	"fmt"
	"time"
)

{{$timeZone := .client.TimeZone}}
{{- if eq $timeZone ""}}
{{$timeZone = "Asia/Shanghai"}}
{{- end}}

type DatetimeColumn struct {
	Name  string
	Table *Table
}

func (t *Table) NewDatetimeColumn(name string) *DatetimeColumn {
	return &DatetimeColumn{
		Table: t,
		Name:  name,
	}
}

func (c *DatetimeColumn) EQ(v string) *Clause {
	location, err := time.LoadLocation("{{$timeZone}}")
	if err != nil {
		return &Clause{
			err: err,
		}
	}
	_v, err := time.ParseInLocation("2006-01-02 15:04:05", v, location)
	return &Clause{
		fragment: fmt.Sprintf("%s.%s = ?", c.Table.Name, c.Name),
		args:     []interface{}{_v.UTC()},
		err:      err,
	}
}

func (c *DatetimeColumn) LE(v string) *Clause {
	location, err := time.LoadLocation("{{$timeZone}}")
	if err != nil {
		return &Clause{
			err: err,
		}
	}
	_v, err := time.ParseInLocation("2006-01-02 15:04:05", v, location)
	return &Clause{
		fragment: fmt.Sprintf("%s.%s <= ?", c.Table.Name, c.Name),
		args:     []interface{}{_v.UTC()},
		err:      err,
	}
}

func (c *DatetimeColumn) LT(v string) *Clause {
	location, err := time.LoadLocation("{{$timeZone}}")
	if err != nil {
		return &Clause{
			err: err,
		}
	}
	_v, err := time.ParseInLocation("2006-01-02 15:04:05", v, location)
	return &Clause{
		fragment: fmt.Sprintf("%s.%s <=?", c.Table.Name, c.Name),
		args:     []interface{}{_v.UTC()},
		err:      err,
	}
}

func (c *DatetimeColumn) GE(v string) *Clause {
	location, err := time.LoadLocation("{{$timeZone}}")
	if err != nil {
		return &Clause{
			err: err,
		}
	}
	_v, err := time.ParseInLocation("2006-01-02 15:04:05", v, location)
	return &Clause{
		fragment: fmt.Sprintf("%s.%s >= ?", c.Table.Name, c.Name),
		args:     []interface{}{_v.UTC()},
		err:      err,
	}
}

func (c *DatetimeColumn) GT(v string) *Clause {
	location, err := time.LoadLocation("{{$timeZone}}")
	if err != nil {
		return &Clause{
			err: err,
		}
	}
	_v, err := time.ParseInLocation("2006-01-02 15:04:05", v, location)
	return &Clause{
		fragment: fmt.Sprintf("%s.%s > ?", c.Table.Name, c.Name),
		args:     []interface{}{_v.UTC()},
		err:      err,
	}
}
